# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- main

variables:
  imageRegistry: 'zhangchl008acr.azurecr.io'
  imageProject: demo
  myApp: spring-azure-demo
  tag: '$(Build.BuildId)'
  imagePullSecret: 'zhangchl008acr1646e01f-auth'
  # Agent VM image name
  vmImageName: 'ubuntu-latest'
stages:
- stage: Build 
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        mavenOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.8'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        goals: 'package'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          curl -sSL "https://github.com/buildpacks/pack/releases/download/v0.26.0/pack-v0.26.0-linux.tgz" | tar -C /usr/local/bin --no-same-owner -xzv pack
    - task: BuildpacksTask@1
      inputs:
        command: 'build'
        imageName: '$(imageRegistry)/$(imageProject)/$(myApp):$(tag)'
        builder: 'paketobuildpacks/builder:base'
        projectPath: 'target/spring-azure-demo-0.0.1-SNAPSHOT.jar'
        pullPolicy: 'always'
    - task: Docker@2
      inputs:
        containerRegistry: 'zhangchl008acr'
        repository: '$(imageProject)/$(myApp)'
        command: 'push'
- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'spring-azure-demo'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: 'createSecret'
              kubernetesServiceConnection: 'mydemo_aks'
              namespace: 'default'
              secretType: 'dockerRegistry'
              secretName: '$(imagePullSecret)'
              dockerRegistryEndpoint: 'zhangchl008acr'
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: 'find ./ -name deployment.yml'
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: 'mydemo_aks'
              namespace: 'default'
              manifests: |
                ./s/manifests/deployment.yml
                ./s/manifests/service.yml
              containers: '$(imageRegistry)/$(imageProject)/$(myApp):$(tag)'
              imagePullSecrets: '$(imagePullSecret)'



  